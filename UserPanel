import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;

public class UserPanel extends JPanel implements /*KeyListener,*/ ActionListener, JavaArcade
{
    int healthBar, age, timePassed, stage;

    private Person baby, selectedPerson, child, student, adult, senior;

    private javax.swing.Timer timer;
    private javax.swing.Timer stageTimers;

    private javax.swing.Timer healthTimer, ageTimer;

    private Food fruit, veg, soda, burger;
    private Food[] foodList;

    private Interests phone, gaming, sports, music;
    private Interests[] interestList;

    private Grades F, tardy, A, B;
    private Grades [] gradeList;

    private boolean start = false;
    private int x,y;

    //Background image
    Image backG0, backG1, backG2, backG3, backG4, backG5, backG6;

    public void BackgroundPanel(Graphics g) //printing different backgrounds for different stages
    {
        File imgFile0 = new File("homePage.png");
        try {
            backG0 = ImageIO.read(imgFile0);
        }catch (IOException e){
            e.printStackTrace();
        }

        File imgFile1 = new File("stage1.png");
        try {
            backG1 = ImageIO.read(imgFile1);
        }catch (IOException e){
            e.printStackTrace();
        }

        File imgFile2 = new File("stage2.png");
        try {
            backG2 = ImageIO.read(imgFile2);
        }catch (IOException e){
            e.printStackTrace();
        }

        File imgFile3 = new File("stage3.png");
        try {
            backG3 = ImageIO.read(imgFile3);
        }catch (IOException e){
            e.printStackTrace();
        }
        /*
        File imgFile4 = new File("stage4.png");
        try {
            backG4 = ImageIO.read(imgFile4);
        }catch (IOException e){
            e.printStackTrace();
        }

        File imgFile5 = new File("stage5.png");
        try {
            backG5 = ImageIO.read(imgFile5);
        }catch (IOException e){
            e.printStackTrace();
        }*/

        if (!start) {
            g.drawImage(backG0, 0, 0, null);
        } else { //switching the background based on the different stages
            if(stage == 1) {
                g.drawImage(backG1, 0, 0, null);
                baby.show();
            } else if(stage == 2){
                g.drawImage(backG2, 0, 0, null);
                child.show();
            } else if(stage == 3){
                g.drawImage(backG3, 0, 0, null);
                student.show();
            /*} else if(stage == 4){
                g.drawImage(backG4, 0, 0, null);
                adult.show();
            } else if(stage == 5){
                g.drawImage(backG5, 0, 0, null);
                senior.show();*/
            }
        }
    }

    public void makeItemArrayLists()
    {
        //food
        fruit = new Food(40,-90,"strawberry.png",15);
        veg = new Food(200,-90,"carrot.png",15);
        soda = new Food(400,-90,"soda.png",12);
        burger = new Food(470,-90,"burger.png",12);

        foodList = new Food[4];

        foodList[0] = fruit;
        foodList[1] = veg;
        foodList[2] = soda;
        foodList[3] = burger;

        //interests
        phone = new Interests(40,-90,"phone.png",15);
        gaming = new Interests(200,-90,"gaming.png",15);
        sports = new Interests(400,-90,"sports.png",12);
        music = new Interests(500,-90,"music.png",12);

        interestList = new Interests[4];

        interestList[0] = phone;
        interestList[1] = gaming;
        interestList[2] = sports;
        interestList[3] = music;

        //grades
        F = new Grades(40,-90,"F.png",15);
        tardy = new Grades(200,-90,"tardy.png",15);
        A = new Grades(400,-90,"A.png",12);
        B = new Grades(500,-90,"B.png",12);

        gradeList = new Grades[4];

        gradeList[0] = F;
        gradeList[1] = tardy;
        gradeList[2] = A;
        gradeList[3] = B;
    }

    public UserPanel(int width, int height)
    {
        int babyHeight, babyWidth; //Add others later

        babyHeight = height / 10;
        babyWidth = width / 10;

        baby = new Person(300,300,"baby.png");
        baby.hide();

        child = new Person(300,300,"child.png");
        child.hide();

        student = new Person(300, 300, "student.png");
        student.hide();

        makeItemArrayLists();

        healthBar = 10;
        age = 0;
        timePassed = 0;
        stage = 1;

        //Timer
        timer = new javax.swing.Timer(50,this);
        stageTimers = new javax.swing.Timer(1000, new StageTimerListener()); //10 seconds timer for each stage

        //Timer goes off every 1 second
        healthTimer = new javax.swing.Timer(1000, new HealthListener());
        ageTimer = new javax.swing.Timer(1000, new AgeListener());
        addMouseListener(new PanelListener());
        addMouseMotionListener(new PanelMotionListener());

        //Do we need this?
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);

        setPreferredSize(new Dimension(width, height));
    }

    public void actionPerformed(ActionEvent e)
    {
        checkStats();
        repaint();
    }

    public void paintComponent(Graphics g)
    {
        super.paintComponent(g);

        BackgroundPanel(g);

        if (stage == 1){
            baby.draw(this, g);

            fruit.draw(this, g);
            veg.draw(this, g);
            soda.draw(this, g);
            burger.draw(this, g);
        }else if (stage == 2){
            baby.hide(); fruit.hide(); veg.hide(); soda.hide(); burger.hide();
            child.draw(this,g);
            phone.draw(this, g);
            gaming.draw(this, g);
            sports.draw(this, g);
            music.draw(this, g);
        } else if(stage == 3){
            baby.hide(); fruit.hide(); veg.hide(); soda.hide(); burger.hide();
            child.hide(); phone.hide(); gaming.hide(); sports.hide(); music.hide();

            student.draw(this,g);
            F.draw(this, g);
            tardy.draw(this, g);
            A.draw(this, g);
            B.draw(this, g);
        }


        g.setColor(Color.white);
        g.drawString("Health: " + healthBar, 20, getHeight()-30);
        g.drawString("Age: " + age, 20, getHeight() - 50);
        g.drawString("Time: " + timePassed, 20, getHeight() - 70);

        if (!start)
        {
         /*g.drawString("Instructions: ... write stuff here", (getWidth() /2) - 100, getHeight()/2 + 20);
	  	   g.drawString("(Inactive) Press enter to shoot .", (getWidth() /2) - 100, getHeight()/2 + 40);
	  	   g.drawString("You have 3 lives to kill the enemy", (getWidth() /2) - 100, getHeight()/2+ 60);*/
        }
    }

    //Listeners
    private class HealthListener implements ActionListener
    {
        //Because we are implementing ActionListener, we must define actionPerformed
        public void actionPerformed (ActionEvent e)
        {
            healthBar--; //Every 5 seconds, lose a point
        }
    }

    private class AgeListener implements ActionListener
    {
        //Because we are implementing ActionListener, we must define actionPerformed
        public void actionPerformed (ActionEvent e)
        {
            age++; //Every 5 seconds, age up
        }
    }

    private class StageTimerListener implements ActionListener
    {
        public void actionPerformed(ActionEvent e)
        {
            timePassed++; //Every 1 second time up
        }
    }

    private void checkStats()//Why is there a null pointer exception here
    {
        Person.setPanelWidth(getWidth());

        for (Food f: foodList)
        {
            f.move();

            if (isMouseTouchingFood(f))
            {
                f.hide();
                setFoodPosition(f);
                f.show();

                if(f.getItemName().equals("burger.png") || f.getItemName().equals("soda.png"))
                    healthBar--;
                else
                    healthBar++;
            }

            if(f.getY() > 450)
            {
                setFoodPosition(f);
                f.show();
            }
        }

        for (Interests i: interestList)
        {
            i.move();

            if (isMouseTouchingInterest(i))
            {
                i.hide();
                setInterestPosition(i);
                i.show();

                if(i.getItemName().equals("gaming.png") || i.getItemName().equals("phone.png"))
                    healthBar--;
                else
                    healthBar++;
            }

            if(i.getY() > 450)
            {
                setInterestPosition(i);
                i.show();
            }
        }

        for (Grades g: gradeList)
        {
            g.move();

            if (isMouseTouchingGrades(g))
            {
                g.hide();
                setGradePosition(g);
                g.show();

                if(g.getItemName().equals("F.png") || g.getItemName().equals("tardy.png"))
                    healthBar--;
                else
                    healthBar++;
            }

            if(g.getY() > 450)
            {
                setGradePosition(g);
                g.show();
            }
        }

        if(healthBar <= 0 )//|| timePassed >= 10)
            stopGame();
        else if((stage == 1 && timePassed == 10) || (stage == 2 && timePassed == 20) || (stage == 3 && timePassed == 30)) //we have to add all the times later when all the stages are done
            stage++;

    }

    public void setFoodPosition(Food f)
    {
        int randomX = (int) (Math.random()*400) + 100;
        f.setY(-90);
        f.setX(randomX);
    }

    public void setInterestPosition(Interests i)
    {
        int randomX = (int) (Math.random()*400) + 100;
        i.setY(-90);
        i.setX(randomX);
    }

    public void setGradePosition(Grades g)
    {
        int randomX = (int) (Math.random()*400) + 100;
        g.setY(-90);
        g.setX(randomX);
    }

    public boolean isMouseTouchingFood(Food f)
    {
        if (baby.containsPoint(f.getX(), f.getY()) )
            return true;
        else
            return false;
    }

    public boolean isMouseTouchingInterest(Interests i)
    {
        if (child.containsPoint(i.getX(), i.getY()) )
            return true;
        else
            return false;
    }

    public boolean isMouseTouchingGrades(Grades i)
    {
        if (student.containsPoint(i.getX(), i.getY()) )
            return true;
        else
            return false;
    }

    private class PanelListener extends MouseAdapter
    {
        public void mousePressed(MouseEvent e)
        {
            x = e.getX();
            y = e.getY();
            System.out.println("x : " + x + " y : " + y);

            if (baby.containsPoint(x, y))
            {
                System.out.print("true");
                selectedPerson = baby;
            }

            if (child.containsPoint(x, y))
            {
                System.out.print("true");
                selectedPerson = child;
            }

            if (student.containsPoint(x, y))
            {
                System.out.print("true");
                selectedPerson = student;
            }
        }
        public void mouseReleased(MouseEvent e)
        {
            x = e.getX();
            y = e.getY();
            selectedPerson = null;
        }
    }

    public class PanelMotionListener extends MouseMotionAdapter
    {
        public void mouseDragged(MouseEvent e)
        {
            int newX = e.getX();
            int newY = e.getY();
            int dx = newX - x;
            int dy = newY -y;

            if (selectedPerson != null)
            {
                selectedPerson.moveMouse(dx,dy);
                System.out.println("moving");
            }

            x = newX;
            y = newY;

            //if (f.containsPoint(baby.getX(), baby.getY()))
            //f.hide(null);

            repaint();
        }
    }

    //Java Arcade methods
    public boolean running()
    {
        if (start)
            return true;
        else
            return false;
    }

    public void startGame()
    {
        start = true;
        timer.start();
        healthTimer.start();
        ageTimer.start();
        stageTimers.start();
    }

    public String getGameName()
    {
        return "The Game of Life";
    }

    public void pauseGame()
    {
        start = false;
        timer.stop();
        healthTimer.stop();
        ageTimer.stop();
        stageTimers.stop();
    }

    public String getInstructions()
    {
        return "The goal of this game is to keep your health by collecting the good items in each stage.";
    }

    public String getCredits()
    {
        return "Created by Erin Li and Shravanika Kumaran";
    }

    public String getHighScore()
    {
        return "" + age;
    }

    public void stopGame()
    {
        start = false;
        timer.stop();
        healthTimer.stop();
        ageTimer.stop();
        stageTimers.stop();
        healthBar = 0;
        age = 0;
    }

    public int getPoints()
    {
        return age;
    }

    public int getHealthBar()
    {
        return healthBar;
    }

    public void setDisplay(GameStats d)
    {
        d.update(age);
    }
}
