import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.util.Scanner;
import java.io.PrintWriter;


public class UserPanel extends JPanel implements /*KeyListener,*/ ActionListener, JavaArcade {
    private int healthBar, timePassed, stage;
    private double age;

    private Person baby, selectedPerson, child, student, adult, senior;

    private javax.swing.Timer timer;
    private javax.swing.Timer stageTimers;

    private javax.swing.Timer healthTimer, ageTimer;

    private Food fruit, veg, soda, burger;
    private Food[] foodList;

    private Interests phone, gaming, sports, music;
    private Interests[] interestList;

    private Grades F, tardy, A, B;
    private Grades[] gradeList;

    private Jobs murderer, traveler, robber, fortuneCookieWriter;
    private Jobs[] jobList;

    private Dangers pineapple, lightning, laughing, exercise;
    private Dangers[] dangerList;

    private boolean start = false;
    private boolean gameOver = false;
    private int x, y;
    private GameStats game;

    //Background image
    Image backG;
    File imgFile;
    String[] imgFiles = {"homePage.png", "stage1.png", "stage2.png", "stage3.png", "stage4.png", "stage5.png", "gameOver.png"};

    public void BackgroundPanel(Graphics g) //printing different backgrounds for different stages
    {
        imgFile = new File(imgFiles[stage]);
        try {
            backG = ImageIO.read(imgFile);
        } catch (IOException e) {
            e.printStackTrace();
        }

        g.drawImage(backG, 0, 0, null);

        if (!start) {
            imgFile = new File("homePage.png");
            try {
                backG = ImageIO.read(imgFile);
            } catch (IOException e) {
                e.printStackTrace();
            }
            g.drawImage(backG, 0, 0, null);
        } else {
            //switching the background based on the different stages
            if (stage == 1)
                baby.show();
            else if (stage == 2) {
                baby.hide();
                child.show();
            } else if (stage == 3) {
                child.hide();
                student.show();
            } else if (stage == 4) {
                student.hide();
                adult.show();
            } else if (stage == 5) {
                adult.hide();
                senior.show();
            }
        }
        if(gameOver){
            imgFile = new File("gameOver.png");
            try {
                backG = ImageIO.read(imgFile);
            } catch (IOException e) {
                e.printStackTrace();
            }
            g.drawImage(backG, 0, 0, null);

            baby.hide();
            fruit.hide();
            veg.hide();
            soda.hide();
            burger.hide();
            child.hide();
            phone.hide();
            gaming.hide();
            sports.hide();
            music.hide();
            student.hide();
            F.hide();
            A.hide();
            tardy.hide();
            B.hide();
            adult.hide();
            fortuneCookieWriter.hide();
            traveler.hide();
            murderer.hide();
            robber.hide();
            senior.hide();
            pineapple.hide();
            lightning.hide();
            laughing.hide();
            exercise.hide();
        }
    }

    public void makeItemArrayLists() {
        //food
        fruit = new Food(40, -90, "strawberry.png", 15);
        veg = new Food(200, -90, "carrot.png", 15);
        soda = new Food(350, -90, "soda.png", 12);
        burger = new Food(470, -90, "burger.png", 12);

        foodList = new Food[4];

        foodList[0] = fruit;
        foodList[1] = veg;
        foodList[2] = soda;
        foodList[3] = burger;

        //interests
        phone = new Interests(40, -90, "phone.png", 15);
        gaming = new Interests(200, -90, "gaming.png", 15);
        sports = new Interests(350, -90, "sports.png", 18);
        music = new Interests(500, -90, "music.png", 18);

        interestList = new Interests[4];

        interestList[0] = phone;
        interestList[1] = gaming;
        interestList[2] = sports;
        interestList[3] = music;

        //grades
        F = new Grades(40, -90, "F.png", 18);
        tardy = new Grades(200, -90, "tardy.png", 18);
        A = new Grades(350, -90, "A.png", 21);
        B = new Grades(500, -90, "B.png", 21);

        gradeList = new Grades[4];

        gradeList[0] = F;
        gradeList[1] = tardy;
        gradeList[2] = A;
        gradeList[3] = B;

        //jobs
        murderer = new Jobs(40, -90, "murderer.png", 21);
        traveler = new Jobs(200, -90, "traveler.png", 24);
        robber = new Jobs(350, -90, "robber.png", 21);
        fortuneCookieWriter = new Jobs(500, -90, "fortuneCookie.png", 24);

        jobList = new Jobs[4];

        jobList[0] = murderer;
        jobList[1] = traveler;
        jobList[2] = robber;
        jobList[3] = fortuneCookieWriter;

        //dangers
        pineapple = new Dangers(40, -90, "pineapple.png", 24);
        lightning = new Dangers(200, -90, "lightning.png", 24);
        laughing = new Dangers(350, -90, "laughing.png", 24);
        exercise = new Dangers(500, -90, "exercise.png", 27);

        dangerList = new Dangers[4];

        dangerList[0] = pineapple;
        dangerList[1] = lightning;
        dangerList[2] = laughing;
        dangerList[3] = exercise;
    }

    public UserPanel(int width, int height) {
        baby = new Person(300, 300, 1, "baby.png");
        baby.hide();

        child = new Person(300, 300, 2, "child.png");
        child.hide();

        student = new Person(300, 300, 3, "student.png");
        student.hide();

        adult = new Person(300, 300, 4, "adult.png");
        adult.hide();

        senior = new Person(300, 315, 5, "senior.png");
        senior.hide();


        makeItemArrayLists();

        healthBar = 10;
        age = 0;
        timePassed = 0;
        stage = 1;


        //Timer
        timer = new javax.swing.Timer(50, this);
        stageTimers = new javax.swing.Timer(1000, new StageTimerListener()); //10 seconds timer for each stage

        //Timer goes off every 1 second
        healthTimer = new javax.swing.Timer(1000, new HealthListener());
        ageTimer = new javax.swing.Timer(1000, new AgeListener());
        addMouseListener(new PanelListener());
        addMouseMotionListener(new PanelMotionListener());

        //Do we need this?
        setFocusable(true);
        setFocusTraversalKeysEnabled(false);

        setPreferredSize(new Dimension(width, height));
    }

    public void actionPerformed(ActionEvent e) {
        game.update(getPoints());
        checkStats();
        repaint();
    }

    public void paintComponent(Graphics g) {
        super.paintComponent(g);

        BackgroundPanel(g);

        if (stage == 1) {
            baby.draw(this, g);
            fruit.draw(this, g);
            veg.draw(this, g);
            soda.draw(this, g);
            burger.draw(this, g);
        } else if (stage == 2) {
            baby.hide();
            fruit.hide();
            veg.hide();
            soda.hide();
            burger.hide();

            child.draw(this, g);
            phone.draw(this, g);
            gaming.draw(this, g);
            sports.draw(this, g);
            music.draw(this, g);
        } else if (stage == 3) {
            child.hide();
            phone.hide();
            gaming.hide();
            sports.hide();
            music.hide();

            student.draw(this, g);
            F.draw(this, g);
            tardy.draw(this, g);
            A.draw(this, g);
            B.draw(this, g);
        } else if (stage == 4) {
            student.hide();
            F.hide();
            A.hide();
            tardy.hide();
            B.hide();

            adult.draw(this, g);
            fortuneCookieWriter.draw(this, g);
            traveler.draw(this, g);
            murderer.draw(this, g);
            robber.draw(this, g);
        } else if (stage == 5) {
            adult.hide();
            fortuneCookieWriter.hide();
            traveler.hide();
            murderer.hide();
            robber.hide();

            senior.draw(this, g);
            pineapple.draw(this, g);
            lightning.draw(this, g);
            laughing.draw(this, g);
            exercise.draw(this, g);
        } else if (gameOver) {
            senior.hide();
            pineapple.hide();
            lightning.hide();
            laughing.hide();
            exercise.hide();
        }

        if (gameOver) {
            g.setColor(Color.black);
            g.drawString("Age: " + (int) age, 350, getHeight() - 50);

        }

    }

    //Listeners
    private class HealthListener implements ActionListener {
        //Because we are implementing ActionListener, we must define actionPerformed
        public void actionPerformed(ActionEvent e) {
            healthBar--; //Every 5 seconds, lose a point

            if (stage == 5)
                healthBar--;

            game.updateHealth(getHealth());
        }
    }

    private class AgeListener implements ActionListener {
        //Because we are implementing ActionListener, we must define actionPerformed
        public void actionPerformed(ActionEvent e) {
            if (stage == 1)
                age += 0.3;
            else if (stage == 2)
                age += 0.4;
            else if (stage == 3)
                age += 1.4;
            else if (stage == 4)
                age += 3.9;
            else
                age++;

            game.update(getPoints());
        }
    }

    private class StageTimerListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            timePassed++; //Every 1 second time up

            game.updateTime(timePassed);
        }
    }

    private void checkStats() {
        Person.setPanelWidth(getWidth());

        if (stage == 1) {
            for (Food f : foodList) {
                f.move();

                if (isMouseTouchingItem(f)) {
                    f.hide();
                    setPosition(f);
                    f.show();

                    healthBar += f.PointVal();
                }

                if (f.getY() > 450) {
                    setPosition(f);
                    f.show();
                }
            }
        } else if (stage == 2) {
            for (Interests i : interestList) {
                i.move();

                if (isMouseTouchingItem(i)) {
                    i.hide();
                    setPosition(i);
                    i.show();

                    healthBar += i.PointVal();
                }

                if (i.getY() > 450) {
                    setPosition(i);
                    i.show();
                }
            }
        } else if (stage == 3) {
            for (Grades g : gradeList) {
                g.move();

                if (isMouseTouchingItem(g)) {
                    g.hide();
                    setPosition(g);
                    g.show();

                    healthBar += g.PointVal();
                }

                if (g.getY() > 450) {
                    setPosition(g);
                    g.show();
                }
            }
        } else if (stage == 4) {
            for (Jobs j : jobList) {
                j.move();

                if (isMouseTouchingItem(j)) {
                    j.hide();
                    setPosition(j);
                    j.show();

                    healthBar += j.PointVal();
                }

                if (j.getY() > 450) {
                    setPosition(j);
                    j.show();
                }
            }
        } else if (stage == 5) {
            for (Dangers d : dangerList) {
                d.move();

                if (isMouseTouchingItem(d)) {
                    d.hide();
                    setPosition(d);
                    d.show();

                    healthBar += d.PointVal();
                }

                if (d.getY() > 450) {
                    setPosition(d);
                    d.show();
                }
            }
        }

        if (healthBar <= 0)//|| timePassed >= 10)
            stopGame();
        else if ((stage == 1 && timePassed == 10) || (stage == 2 && timePassed == 20) ||
                (stage == 3 && timePassed == 30) || (stage == 4 && timePassed == 40))
            stage++;

    }

    public void setPosition(Items i) {
        int randomX = (int) (Math.random() * 400) + 100;
        i.setY(-90);
        i.setX(randomX);
    }

    public boolean isMouseTouchingItem(Items i) {
        i.setCenters();

        if (stage == 1)
            return baby.containsPoint(1, i.getItemCenterX(), i.getItemCenterY());
        else if (stage == 2)
            return child.containsPoint(2, i.getItemCenterX(), i.getItemCenterY());
        else if (stage == 3)
            return student.containsPoint(3, i.getItemCenterX(), i.getItemCenterY());
        else if (stage == 4)
            return adult.containsPoint(4, i.getItemCenterX(), i.getItemCenterY());
        else if (stage == 5)
            return senior.containsPoint(5, i.getItemCenterX(), i.getItemCenterY());
        else
            return false;
    }

    private class PanelListener extends MouseAdapter {
        public void mousePressed(MouseEvent e) {
            x = e.getX();
            y = e.getY();
            System.out.println("x : " + x + " y : " + y);

            if (baby.containsPoint(1, x, y)) {
                System.out.print("true");
                selectedPerson = baby;
            } else if (child.containsPoint(2, x, y)) {
                System.out.print("true");
                selectedPerson = child;
            } else if (student.containsPoint(3, x, y)) {
                System.out.print("true");
                selectedPerson = student;
            } else if (adult.containsPoint(4, x, y)) {
                System.out.print("true");
                selectedPerson = adult;
            } else if (senior.containsPoint(5, x, y)) {
                System.out.print("true");
                selectedPerson = senior;
            }
        }

        public void mouseReleased(MouseEvent e) {
            x = e.getX();
            y = e.getY();
            selectedPerson = null;
        }
    }

    public class PanelMotionListener extends MouseMotionAdapter {
        public void mouseDragged(MouseEvent e) {
            int newX = e.getX();
            int dx = newX - x;

            if (selectedPerson != null) {
                selectedPerson.moveMouse(dx);
                System.out.println("moving");
            }

            x = newX;

            if (selectedPerson != null)
                selectedPerson.setCenterX(x);

            repaint();
        }
    }

    //Java Arcade methods
    public boolean running() {
        if (start)
            return true;
        else
            return false;
    }

    public void startGame() {
        start = true;
        gameOver = false;
        stage = 1;
        timer.start();
        healthTimer.start();
        ageTimer.start();
        stageTimers.start();
    }

    public String getGameName() {
        return "The Game of Life";
    }

    public void pauseGame() {
        start = false;
        timer.stop();
        healthTimer.stop();
        ageTimer.stop();
        stageTimers.stop();
    }

    public String getInstructions() {
        return "The goal of this game is to keep your health up by collecting the good items in each stage.";
    }

    public String getCredits() {
        return "Created by Erin Li and Shravanika Kumaran";
    }

    public String getHighScore() {
        int highScore = 0;
        try {
            Scanner fileReader = new Scanner(new File("highScores.txt"));
            highScore = fileReader.nextInt();
        } catch (Exception e) {
            System.out.println("File Not Found.");
        }

        return "" + highScore;
    }

    public void stopGame() {
        gameOver = true;
        start = false;
        timer.stop();
        healthTimer.stop();
        ageTimer.stop();
        stageTimers.stop();
        healthBar = 0;
        stage = 0;
        repaint();
        game.gameOver(getPoints());
        if (Integer.parseInt(getHighScore()) < (int) age)
        {
            try {
                PrintWriter writer = new PrintWriter(new File("highScores.txt"));
                writer.println((int) age);
                writer.close();
            } catch (Exception e) {
                System.out.print("File not Found");
            }
        }

    }

    public int getPoints() {
        return (int) age;
    }

    public int getHealth() {
        return healthBar;
    }

    public int getTime() {
        return timePassed;
    }

    public void setDisplay(GameStats d) {
        game = d;
        d.update(getPoints());
        d.updateHealth(getHealth());
        d.updateTime(getTime());
    }
}
